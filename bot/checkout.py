import django
import os

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, \
    InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from asgiref.sync import sync_to_async
from bot.models import BotUser, OrderHistory  # –Ü–º–ø–æ—Ä—Ç—É–π —Å–≤–æ—ó –º–æ–¥–µ–ª—ñ!

router = Router()

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "bachelor.settings")  # ‚úÖ –í–∫–∞–∑—É—î–º–æ Django settings
django.setup()  # ‚úÖ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Django

# üìå –ú–∞—à–∏–Ω–∞ —Å—Ç–∞–Ω—ñ–≤ (FSM)
class CheckoutStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_address = State()
    waiting_for_payment = State()
    waiting_for_phone = State()


# üü¢ 1. –ù–∞—Ç–∏—Å–∫–∞–Ω–Ω—è "–û—Ñ–æ—Ä–º–∏—Ç–∏"
@router.callback_query(F.data == "checkout")
async def start_checkout(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–∞—à–µ —ñ–º'—è:")
    await state.set_state(CheckoutStates.waiting_for_name)


# üü¢ 2. –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è
@router.message(CheckoutStates.waiting_for_name)
async def get_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await state.set_state(CheckoutStates.waiting_for_address)


# üü¢ 3. –û—Ç—Ä–∏–º—É—î–º–æ –∞–¥—Ä–µ—Å—É
@router.message(CheckoutStates.waiting_for_address)
async def get_address(message: Message, state: FSMContext):
    await state.update_data(address=message.text)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ì–æ—Ç—ñ–≤–∫–∞")], [KeyboardButton(text="–ö–∞—Ä—Ç–∞")], [KeyboardButton(text="–û–Ω–ª–∞–π–Ω")]],
        resize_keyboard=True, one_time_keyboard=True
    )
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:", reply_markup=keyboard)
    await state.set_state(CheckoutStates.waiting_for_payment)


# üü¢ 4. –û—Ç—Ä–∏–º—É—î–º–æ –æ–ø–ª–∞—Ç—É
@router.message(CheckoutStates.waiting_for_payment)
async def get_payment(message: Message, state: FSMContext):
    await state.update_data(payment=message.text)

    if message.text.lower() == "–æ–Ω–ª–∞–π–Ω":
        data = await state.get_data()
        name = data.get("name")
        address = data.get("address")

        # –ó–∞–º—ñ—Å—Ç—å get_or_create –∑–∞ name ‚Üí —à—É–∫–∞—î–º–æ –∑–∞ Telegram ID:
        telegram_id = message.from_user.id
        print("üì≤ TELEGRAM USER ID:", message.from_user.id)
        user, created = await sync_to_async(BotUser.objects.get_or_create)(
            telegram_id=telegram_id,
            defaults={"name": name, "address": address}
        )
        print("üë§ BotUser ID:", user.id)
        print("üÜï –ë—É–ª–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞?", created)

        # –®—É–∫–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω—É –∫–æ—Ä–∑–∏–Ω—É
        from bot.models import Cart  # üëà –Ü–º–ø–æ—Ä—Ç —Ç—É—Ç, –±–æ Django.setup() —É–∂–µ –ø—Ä–∞—Ü—é—î
        cart = await Cart.objects.filter(id=telegram_id, is_active=True).order_by("-created_at").afirst()

        if cart:
            print(f"üõí Cart –∑–Ω–∞–π–¥–µ–Ω–æ: ID={cart.id}, –°—É–º–∞: {cart.total_sum}")
            print(f"üì¶ –ü—Ä–∏–≤ º—è–∑–∞–Ω–∞ –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ID: {cart.user.telegram_id}")
        else:
            print("üö´ Cart –ù–ï –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è user.id:", user.telegram_id)

        if not cart or not await sync_to_async(cart.items.exists)():
            await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è üçï")
            await state.clear()
            return

        total_sum = float(cart.total_sum)

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        order = await sync_to_async(OrderHistory.objects.create)(
            user=user,
            total_sum=total_sum,
            status="new",
            payment_method="online"
        )
        await sync_to_async(order.items.set)(cart.items.all())

        # –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è LiqPay
        liqpay_url = generate_liqpay_url(
            amount=total_sum,
            order_id=f"order_{order.id}_bot",
            description=f"–û–ø–ª–∞—Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id}"
        )

        kb = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üí≥ –°–ø–ª–∞—Ç–∏—Ç–∏ —á–µ—Ä–µ–∑ LiqPay", url=liqpay_url)]]
        )

        await message.answer(
            f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id} –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!\n"
            f"*–Ü–º‚Äô—è:* {name}\n"
            f"*–ê–¥—Ä–µ—Å–∞:* {address}\n"
            f"*–°—É–º–∞:* {total_sum} –≥—Ä–Ω\n"
            f"*–û–ø–ª–∞—Ç–∞:* –û–Ω–ª–∞–π–Ω",
            parse_mode="Markdown",
            reply_markup=kb
        )

        # –î–µ–∞–∫—Ç–∏–≤—É—î–º–æ –∫–æ—Ä–∑–∏–Ω—É –ø—ñ—Å–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è
        cart.is_active = False
        await sync_to_async(cart.save)()

        await state.clear()

    else:
        # –Ø–∫—â–æ –ù–ï –æ–Ω–ª–∞–π–Ω ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –∑–∞–ø–∏—Ç—É –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É
        contact_keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]],
            resize_keyboard=True, one_time_keyboard=True
        )
        await message.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:", reply_markup=contact_keyboard)
        await state.set_state(CheckoutStates.waiting_for_phone)


# üü¢ 5. –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–ª–µ—Ñ–æ–Ω —ñ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —É –ë–î
@router.message(CheckoutStates.waiting_for_phone)
async def get_phone(message: Message, state: FSMContext):
    phone = message.contact.phone_number if message.contact else message.text
    await state.update_data(phone_number=phone)

    # ‚úÖ –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ
    data = await state.get_data()
    name, address, payment = data["name"], data["address"], data["payment"]

    # ‚úÖ –°—Ç–≤–æ—Ä—é—î–º–æ –∞–±–æ –æ—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user, created = await sync_to_async(BotUser.objects.get_or_create)(
        name=name, telegram_id=message.from_user.id, defaults={"address": address, "phone_number": phone}
    )

    # ‚úÖ –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    order = await sync_to_async(OrderHistory.objects.create)(
        user=user, total_sum=0, status="pending", payment_method=payment
    )

    # ‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    await message.answer(
        f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!\n\n"
        f"*I–º‚Äô—è:* {name}\n"
        f"*–ê–¥—Ä–µ—Å–∞:* {address}\n"
        f"*–û–ø–ª–∞—Ç–∞:* {payment}\n"
        f"*–¢–µ–ª–µ—Ñ–æ–Ω:* {phone}\n"
        f"*–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:* {order.id}",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode="Markdown"
    )

    await state.clear()


import base64
import hashlib
import json

PUBLIC_KEY = 'sandbox_i76181583427'
PRIVATE_KEY = 'sandbox_QGnb2EkKBPAZGed3LU9ApBGnhBFa5i3ID0YpGIzy'

CALLBACK_URL = 'https://example.com/liqpay-callback/'  # –¢–∏–º—á–∞—Å–æ–≤–æ


def generate_liqpay_url(amount: int, order_id: str, description: str = "–û–ø–ª–∞—Ç–∞"):
    data = {
        "public_key": PUBLIC_KEY,
        "version": "3",
        "action": "pay",
        "amount": str(amount),
        "currency": "UAH",
        "description": description,
        "order_id": order_id,
        "server_url": CALLBACK_URL,
    }

    json_data = json.dumps(data)
    encoded_data = base64.b64encode(json_data.encode()).decode()
    sign_string = PRIVATE_KEY + encoded_data + PRIVATE_KEY
    signature = base64.b64encode(hashlib.sha1(sign_string.encode()).digest()).decode()

    url = f"https://www.liqpay.ua/api/3/checkout?data={encoded_data}&signature={signature}"
    return url
