import os

import django
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    CallbackQuery,
    Message,
    KeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    LabeledPrice,
    PreCheckoutQuery,
)
from asgiref.sync import sync_to_async

from bot.models import (
    BotUser,
    OrderHistory,
    DeliveryData,
    Cart,
)  # –Ü–º–ø–æ—Ä—Ç—É–π —Å–≤–æ—ó –º–æ–¥–µ–ª—ñ!

router = Router()

os.environ.setdefault(
    "DJANGO_SETTINGS_MODULE", "bachelor.settings"
)  # ‚úÖ –í–∫–∞–∑—É—î–º–æ Django settings
django.setup()  # ‚úÖ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Django


# üìå –ú–∞—à–∏–Ω–∞ —Å—Ç–∞–Ω—ñ–≤ (FSM)
class CheckoutStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_address = State()
    waiting_for_payment = State()
    waiting_for_phone = State()


# üü¢ 1. –ù–∞—Ç–∏—Å–∫–∞–Ω–Ω—è "–û—Ñ–æ—Ä–º–∏—Ç–∏"
@router.callback_query(F.data == "checkout")
async def start_checkout(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–∞—à–µ —ñ–º'—è:")
    await state.set_state(CheckoutStates.waiting_for_name)


# üü¢ 2. –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è
@router.message(CheckoutStates.waiting_for_name)
async def get_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await state.set_state(CheckoutStates.waiting_for_address)


# üü¢ 3. –û—Ç—Ä–∏–º—É—î–º–æ –∞–¥—Ä–µ—Å—É
@router.message(CheckoutStates.waiting_for_address)
async def get_address(message: Message, state: FSMContext):
    await state.update_data(address=message.text)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ì–æ—Ç—ñ–≤–∫–∞")],
            [KeyboardButton(text="–ö–∞—Ä—Ç–∞")],
            [KeyboardButton(text="–û–Ω–ª–∞–π–Ω")],
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
    )
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:", reply_markup=keyboard)
    await state.set_state(CheckoutStates.waiting_for_payment)


# üü¢ 4. –û—Ç—Ä–∏–º—É—î–º–æ –æ–ø–ª–∞—Ç—É
@router.message(CheckoutStates.waiting_for_payment)
async def get_payment(message: Message, state: FSMContext):
    await state.update_data(payment=message.text)
    data = await state.get_data()

    if message.successful_payment:
        name, address, payment, order_id, total_sum = (
            data["name"],
            data["address"],
            data["payment"],
            data["order_id"],
            data["total_sum"],
        )
        await message.answer(
            f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!\n"
            f"*–Ü–º‚Äô—è:* {name}\n"
            f"*–ê–¥—Ä–µ—Å–∞:* {address}\n"
            f"*–°—É–º–∞:* {total_sum} –≥—Ä–Ω\n"
            f"*–û–ø–ª–∞—Ç–∞:* –û–Ω–ª–∞–π–Ω",
            parse_mode="Markdown",
        )

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ —Å—Ç–∞—Ç—É—Å "–æ–ø–ª–∞—á–µ–Ω–æ"
        order = await OrderHistory.objects.filter(id=order_id).afirst()
        if order:
            order.status = "paid"
            await order.asave()

        await state.clear()

    if message.text.lower() == "–æ–Ω–ª–∞–π–Ω":
        data = await state.get_data()
        name = data.get("name")
        address = data.get("address")

        # –ó–∞–º—ñ—Å—Ç—å get_or_create –∑–∞ name ‚Üí —à—É–∫–∞—î–º–æ –∑–∞ Telegram ID:
        telegram_id = message.from_user.id
        print("üì≤ TELEGRAM USER ID:", message.from_user.id)
        user, created = await sync_to_async(BotUser.objects.get_or_create)(
            telegram_id=telegram_id, defaults={"name": name, "address": address}
        )
        print("üë§ BotUser ID:", user.id)
        print("üÜï –ë—É–ª–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞?", created)

        # –®—É–∫–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω—É –∫–æ—Ä–∑–∏–Ω—É
        from bot.models import Cart  # üëà –Ü–º–ø–æ—Ä—Ç —Ç—É—Ç, –±–æ Django.setup() —É–∂–µ –ø—Ä–∞—Ü—é—î

        cart = (
            await Cart.objects.filter(user__telegram_id=telegram_id, is_active=True)
            .order_by("-created_at")
            .alast()
        )

        if cart:
            print(f"üõí Cart –∑–Ω–∞–π–¥–µ–Ω–æ: ID={cart.id}, –°—É–º–∞: {cart.total_sum}")
        else:
            print("üö´ Cart –ù–ï –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è user.id:", user.telegram_id)

        if not cart or not await cart.items.aexists():
            await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è üçï")
            await state.clear()
            return

        total_sum = float(cart.total_sum)

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        order = await sync_to_async(OrderHistory.objects.create)(
            user=user, total_sum=total_sum, status="new", payment_method="online"
        )
        await state.update_data(
            {
                "order_id": order.id,
                "total_sum": total_sum,
            }
        )
        await sync_to_async(order.items.set)(cart.items.all())

        PRICE = LabeledPrice(
            label=f"–û–ø–ª–∞—Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id}", amount=int(total_sum) * 100
        )
        from bot.telegram_bot import bot

        await bot.send_invoice(
            message.chat.id,
            title=f"1–û–ø–ª–∞—Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id}",
            description=f"–û–ø–ª–∞—Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id}",
            provider_token="1661751239:TEST:91f0-pQ5h-f8Z4-FcOD",
            currency="uah",
            is_flexible=False,  # True –µ—Å–ª–∏ –∫–æ–Ω–µ—á–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
            prices=[PRICE],
            start_parameter="time-machine-example",
            payload="some-invoice-payload-for-our-internal-use",
        )

        # –î–µ–∞–∫—Ç–∏–≤—É—î–º–æ –∫–æ—Ä–∑–∏–Ω—É –ø—ñ—Å–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è
        cart.is_active = False
        await cart.asave()

    else:
        # –Ø–∫—â–æ –ù–ï –æ–Ω–ª–∞–π–Ω ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –∑–∞–ø–∏—Ç—É –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É
        contact_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]
            ],
            resize_keyboard=True,
            one_time_keyboard=True,
        )
        await message.answer(
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:",
            reply_markup=contact_keyboard,
        )
        await state.set_state(CheckoutStates.waiting_for_phone)


@router.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    from bot.telegram_bot import bot

    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@router.message(F.successful_payment)
async def successful_payment(message: Message, state: FSMContext):
    # ‚úÖ –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ
    data = await state.get_data()

    name, address, payment, order_id, total_sum = (
        data["name"],
        data["address"],
        data["payment"],
        data["order_id"],
        data["total_sum"],
    )
    await message.answer(
        f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!\n"
        f"*–Ü–º‚Äô—è:* {name}\n"
        f"*–ê–¥—Ä–µ—Å–∞:* {address}\n"
        f"*–°—É–º–∞:* {total_sum} –≥—Ä–Ω\n"
        f"*–û–ø–ª–∞—Ç–∞:* –û–Ω–ª–∞–π–Ω",
        parse_mode="Markdown",
    )

    await state.clear()


# üü¢ 5. –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–ª–µ—Ñ–æ–Ω —ñ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —É –ë–î
@router.message(CheckoutStates.waiting_for_phone)
async def get_phone(message: Message, state: FSMContext):
    phone = message.contact.phone_number if message.contact else message.text
    await state.update_data(phone_number=phone)

    # ‚úÖ –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ
    data = await state.get_data()
    name, address, payment = (
        data["name"],
        data["address"],
        data["payment"],
    )

    # ‚úÖ –°—Ç–≤–æ—Ä—é—î–º–æ –∞–±–æ –æ—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user = await BotUser.objects.filter(telegram_id=message.from_user.id).afirst()
    if not user:
        await message.answer(
            "–í–∏–±–∞—á—Ç–µ, –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
        )

    await DeliveryData.objects.acreate(
        user=user, name=name, address=address, phone_number=phone
    )

    # ‚úÖ –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    order = await OrderHistory.objects.acreate(
        user=user, total_sum=0, status="pending", payment_method=payment
    )

    # ‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    await message.answer(
        f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!\n\n"
        f"*I–º‚Äô—è:* {name}\n"
        f"*–ê–¥—Ä–µ—Å–∞:* {address}\n"
        f"*–û–ø–ª–∞—Ç–∞:* {payment}\n"
        f"*–¢–µ–ª–µ—Ñ–æ–Ω:* {phone}\n"
        f"*–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:* {order.id}",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode="Markdown",
    )

    cart = await Cart.objects.filter(user__telegram_id=message.from_user.id).alast()
    cart.is_active = False
    await cart.asave()

    await state.clear()
