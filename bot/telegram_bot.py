import asyncio
import logging

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    CallbackQuery,
)
from asgiref.sync import sync_to_async

from bot.checkout import router  # ‚úÖ –Ü–º–ø–æ—Ä—Ç—É—î–º–æ router
from .menu import *
from .models import *

API_TOKEN = "7330837211:AAEyUOJjqdrBWDUq5MvMw-cZxUil1Cz8hpk"

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

bot = Bot(token=API_TOKEN)

dp = Dispatcher()

dp.include_router(router)

keyboard_main = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ú–µ–Ω—éüçΩ"), KeyboardButton(text="–î–æ–ø–æ–º–æ–≥–∞ —É –≤–∏–±–æ—Ä—ñüåê")],
        [KeyboardButton(text="–ü—Ä–æ –Ω–∞—Åüë•"), KeyboardButton(text="–î–æ—Å—Ç–∞–≤–∫–∞üöò")],
        [KeyboardButton(text="–ö–æ—Ä–∑–∏–Ω–∞üõí"), KeyboardButton(text="–ó–∞–º–æ–≤–ª–µ–Ω–Ω—èüìú")],
    ],
    resize_keyboard=True,
)


@dp.message(Command("start"))
async def cmd_start(message: Message):
    photo_path = "/Users/tareekov/Desktop/BachelorWork/media/drinks/sticker_1.jpg"
    photo = FSInputFile(photo_path)  # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è FSInputFile –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª—É
    await message.answer_photo(
        photo=photo,
        caption="–ü—Ä–∏–≤—ñ—Ç! –†–∞–¥–∏–π –±–∞—á–∏—Ç–∏ —Ç–µ–±–µ –≤ –æ–¥–Ω—ñ–π –∑ "
        "–Ω–∞–π–∫—Ä–∞—â–∏—Ö –ø—ñ—Ü–µ—Ä—ñ–π –õ—É—Ü—å–∫–∞. –ì–∞–π–¥–∞ –≤ –º–µ–Ω—é —Ç–∞ —Ä–æ–±–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!",
        reply_markup=keyboard_main,
    )

    await BotUser.objects.aget_or_create(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
    )


menu_list = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–ø–æ—óü•§", callback_data="drinks")],
        [InlineKeyboardButton(text="–ü—ñ—Ü—Ü–∞üçï", callback_data="pizza")],
        [InlineKeyboardButton(text="–°–æ—É—Åü´ô", callback_data="sauce")],
    ]
)


@dp.message(lambda message: message.text == "–ú–µ–Ω—éüçΩ")
async def menu_all(message: Message):
    photo_path = "/Users/tareekov/Desktop/BachelorWork/media/drinks/sticker_1.jpg"
    photo = FSInputFile(photo_path)
    await message.answer_photo(
        photo=photo,
        caption="–û–±–∏—Ä–∞–π —â–æ —Å–∞–º–µ —Å—å–æ–≥–æ–¥–Ω—ñ –ø—Ä–∏–ø–∞–¥–µ —Ç–æ–±—ñ –¥–æ –¥—É—à—ñ",
        reply_markup=menu_list,
    )


django.setup()


@dp.callback_query(F.data == "pizza")
async def send_pizza(callback: CallbackQuery):
    logger.info("–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—ñ—Ü–∏")
    keyboard = await get_menu_for_category(PizzaList, "pizza")  # –û—Ç—Ä–∏–º—É—î–º–æ –º–µ–Ω—é –ø—ñ—Ü–∏
    logger.info(f"–ú–µ–Ω—é –ø—ñ—Ü–∏ –æ—Ç—Ä–∏–º–∞–Ω–æ: {keyboard}")
    await callback.message.answer("–û–±–µ—Ä—ñ—Ç—å –ø—ñ—Ü—É –∑ –º–µ–Ω—é:", reply_markup=keyboard)

    @dp.callback_query(F.data.startswith("pizza_item_"))
    async def process_pizza_callback(callback_query: CallbackQuery):
        await send_item_details(callback_query, PizzaList, "pizza")


@dp.callback_query(F.data == "drinks")
async def send_drinks(callback: CallbackQuery):
    logger.info("–û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–ø–æ—ó–≤")
    keyboard = await get_menu_for_category(DrinkList, "drink")  # –û—Ç—Ä–∏–º—É—î–º–æ –º–µ–Ω—é –Ω–∞–ø–æ—ó–≤
    logger.info(f"–ú–µ–Ω—é –Ω–∞–ø–æ—ó–≤ –æ—Ç—Ä–∏–º–∞–Ω–æ: {keyboard}")
    await callback.message.answer("–û–±–µ—Ä—ñ—Ç—å –Ω–∞–ø—ñ–π –∑ –º–µ–Ω—é:", reply_markup=keyboard)

    @dp.callback_query(F.data.startswith("drink_item_"))
    async def process_drink_callback(callback_query: CallbackQuery):
        await send_item_details(callback_query, DrinkList, "drink")


@dp.callback_query(F.data == "sauce")
async def send_sauces(callback: CallbackQuery):
    logger.info("–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–æ—É—Å—ñ–≤")
    keyboard = await get_menu_for_category(SauceList, "sauce")  # –û—Ç—Ä–∏–º—É—î–º–æ –º–µ–Ω—é —Å–æ—É—Å—ñ–≤
    logger.info(f"–ú–µ–Ω—é —Å–æ—É—Å—ñ–≤ –æ—Ç—Ä–∏–º–∞–Ω–æ: {keyboard}")
    await callback.message.answer("–û–±–µ—Ä—ñ—Ç—å —Å–æ—É—Å –∑ –º–µ–Ω—é:", reply_markup=keyboard)

    @dp.callback_query(F.data.startswith("sauce_item_"))
    async def process_sauce_callback(callback_query: CallbackQuery):
        await send_item_details(callback_query, SauceList, "sauce")


async def send_item_details(callback_query: CallbackQuery, model_class, item_type: str):
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ ID –µ–ª–µ–º–µ–Ω—Ç–∞
        logger.debug(f"–û—Ç—Ä–∏–º–∞–Ω–æ callback_data: {callback_query.data}")
        logger.debug(f"item_type: {item_type}")

        data_parts = callback_query.data.split("_")
        if item_type not in ["pizza", "drink", "sauce"]:
            logger.error(f"–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π item_type: {item_type}")
            await callback_query.answer(
                "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", show_alert=True
            )
            return

        if len(data_parts) < 3:
            await callback_query.answer(
                "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", show_alert=True
            )
            return

        item_id = int(data_parts[2])
        item = await sync_to_async(model_class.objects.get)(
            id=item_id
        )  # –û—Ç—Ä–∏–º—É—î–º–æ –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É

        # –ü–æ—á–∞—Ç–∫–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É
        quantity = 1

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—à–∏–∫ —É callback_data
        if "|" in callback_query.data:
            cart_total = callback_query.data.split("|")[1]  # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –∫–æ—à–∏–∫–∞
        else:
            cart_total = "0"

        # –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        text = (
            f"**{item.title}**\n\n"
            f"{item.description}\n\n"
            f"üíµ –¶—ñ–Ω–∞: {item.price} –≥—Ä–Ω\n"
        )

        # Inline-–∫–Ω–æ–ø–∫–∏
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚ùå", callback_data=f"remove_{item_type}_{item_id}"
                    ),
                    InlineKeyboardButton(
                        text="‚ûñ", callback_data=f"decrease_{item_type}_{item_id}"
                    ),
                    InlineKeyboardButton(
                        text="‚ûï", callback_data=f"increase_{item_type}_{item_id}"
                    ),
                ],
                [
                    InlineKeyboardButton(
                        text=f"‚úÖ –î–æ–¥–∞—Ç–∏ {quantity} —à—Ç. - {item.price * quantity} –≥—Ä–Ω",
                        callback_data=f"add_to_cart_{item_type}_{item_id}_{quantity}",
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="<< –ù–∞–∑–∞–¥", callback_data=f"back_to_menu_{item_type}"
                    ),
                    InlineKeyboardButton(
                        text=f"<< –ö–æ—à–∏–∫ ({cart_total} –≥—Ä–Ω)", callback_data="view_cart"
                    ),
                ],
            ]
        )

        # –Ø–∫—â–æ —î —Ñ–æ—Ç–æ
        if item.photo and item.photo.path:
            photo = FSInputFile(item.photo.path)
            await callback_query.message.bot.send_photo(
                chat_id=callback_query.message.chat.id,
                photo=photo,
                caption=text,
                parse_mode="Markdown",
                reply_markup=keyboard,
            )
        else:
            await callback_query.message.answer(
                text, parse_mode="Markdown", reply_markup=keyboard
            )

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —É send_item_details: {e}")
        await callback_query.answer(
            "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.", show_alert=True
        )


@sync_to_async
def get_or_create_cart(telegram_id):
    """–û—Ç—Ä–∏–º—É—î–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—à–∏–∫ –±–µ–∑ –ø—Ä–∏–≤'—è–∑–∫–∏ –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    user = BotUser.objects.filter(telegram_id=telegram_id).first()
    cart = Cart.objects.filter(is_active=True, user=user).last()
    if not cart:
        cart = Cart.objects.create(is_active=True, user=user)
    return cart


@dp.callback_query(lambda callback: callback.data.startswith("increase_"))
async def handle_increase(callback_query: types.CallbackQuery, state):
    cart = await get_or_create_cart(callback_query.from_user.id)

    await handle_callback(
        callback_query,
        state,
        cart=cart,
        model_classes={"pizza": PizzaList, "drink": DrinkList, "sauce": SauceList},
    )


@dp.callback_query(lambda callback: callback.data.startswith("decrease_"))
async def handle_decrease(callback_query: CallbackQuery, state):
    cart = await get_or_create_cart(callback_query.from_user.id)

    await handle_callback(
        callback_query,
        state,
        cart=cart,
        model_classes={"pizza": PizzaList, "drink": DrinkList, "sauce": SauceList},
    )


@sync_to_async
def update_cart_total(cart_id):
    try:
        cart, created = Cart.objects.get_or_create(
            id=cart_id, defaults={"total_sum": 0}
        )
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–æ—à–∏–∫–∞: {e}")
        return

    cart_items = CartItem.objects.filter(cart=cart)
    cart.total_sum = sum(item.price * item.quantity for item in cart_items)
    cart.save()


@dp.callback_query(lambda callback: callback.data.startswith("add_to_cart_"))
async def handle_add_to_cart(callback_query: CallbackQuery, state):
    try:
        data_parts = callback_query.data.split("_")
        item_type = data_parts[3]
        item_id = int(data_parts[4])

        # ‚¨áÔ∏è –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–∑ `state`, –∞ –Ω–µ callback_data!
        state_data = await state.get_data()
        current_quantity = state_data.get(
            f"{item_type}_{item_id}_quantity", 1
        )  # –Ø–∫—â–æ –Ω–µ–º–∞—î - —Å—Ç–∞–≤–∏–º–æ 1

        model_classes = {
            "pizza": PizzaList,
            "drink": DrinkList,
            "sauce": SauceList,
        }

        model_class = model_classes.get(item_type)
        if not model_class:
            await callback_query.answer("–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø —Ç–æ–≤–∞—Ä—É.", show_alert=True)
            return

        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–≤–∞—Ä (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        item = await sync_to_async(lambda: model_class.objects.get(id=item_id))()

        # –û—Ç—Ä–∏–º—É—î–º–æ/—Å—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—à–∏–∫
        cart = await get_or_create_cart(callback_query.from_user.id)

        # –î–æ–¥–∞—î–º–æ/–æ–Ω–æ–≤–ª—é—î–º–æ —Ç–æ–≤–∞—Ä —É –∫–æ—à–∏–∫—É
        cart_item, created = await sync_to_async(
            lambda: CartItem.objects.get_or_create(
                category=item_type,
                item_id=item_id,
                cart=cart,
                defaults={
                    "title": item.title,
                    "price": item.price,
                    "quantity": current_quantity,
                },
            )
        )()

        if not created:
            cart_item.quantity += current_quantity
            await cart_item.asave()

        # –î–æ–¥–∞—î–º–æ —Ç–æ–≤–∞—Ä —É –∫–æ—à–∏–∫
        await sync_to_async(cart.items.add)(cart_item)

        # üîπ –ì–ê–†–ê–ù–¢–û–í–ê–ù–û –û–ù–û–í–õ–Æ–Ñ–ú–û –ó–ê–ì–ê–õ–¨–ù–£ –°–£–ú–£ –ö–û–®–ò–ö–ê
        await update_cart_total(cart.id)

        # üîπ –ß–ï–ö–ê–Ñ–ú–û, –ü–û–ö–ò –î–ê–ù–Ü –û–ù–û–í–õ–Ø–¢–¨–°–Ø –í –ë–î
        await asyncio.sleep(0.1)  # ‚è≥ –î–∞—î–º–æ —á–∞—Å –±–∞–∑—ñ –æ–Ω–æ–≤–∏—Ç–∏—Å—è

        # üîπ –û–¢–†–ò–ú–£–Ñ–ú–û –ê–ö–¢–£–ê–õ–¨–ù–ï –ó–ù–ê–ß–ï–ù–ù–Ø –°–£–ú–ò
        cart = await sync_to_async(lambda: Cart.objects.get(id=cart.id))()
        cart_total = cart.total_sum  # –¢–µ–ø–µ—Ä –∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ—Ä–µ–∫—Ç–Ω–µ

        # üîπ –û–ù–û–í–õ–Æ–Ñ–ú–û –ö–ù–û–ü–ö–£ "–ö–û–®–ò–ö"
        keyboard = callback_query.message.reply_markup.inline_keyboard
        new_cart_text = (
            f"<< –ö–æ—à–∏–∫ ({cart_total} –≥—Ä–Ω)" if cart_total > 0 else "<< –ö–æ—à–∏–∫ (0 –≥—Ä–Ω)"
        )

        for row in keyboard:
            for button in row:
                if "<< –ö–æ—à–∏–∫" in button.text:
                    button.text = new_cart_text  # –û–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
                    break
        updated_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

        # üîπ –û–ù–û–í–õ–Æ–Ñ–ú–û –ö–õ–ê–í–Ü–ê–¢–£–†–£
        await callback_query.message.edit_reply_markup(reply_markup=updated_markup)

        # üîπ –í–Ü–î–ü–†–ê–í–õ–Ø–Ñ–ú–û –ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–ù–Ø –ö–û–†–ò–°–¢–£–í–ê–ß–£
        await callback_query.answer(
            f"‚úÖ {item.title} ({current_quantity} —à—Ç.) –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞! –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {cart_total} –≥—Ä–Ω.",
            show_alert=True,
        )

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —É handle_add_to_cart: {e}")
        await callback_query.answer(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –≤ –∫–æ—à–∏–∫!", show_alert=True
        )


# handle_callback —Ñ—É–Ω–∫—Ü—ñ—è –∑ –ª–æ–≥—ñ–∫–æ—é –∑–±—ñ–ª—å—à–µ–Ω–Ω—è, –∑–º–µ–Ω—à–µ–Ω–Ω—è, –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É —Ç–æ—â–æ


async def handle_callback(callback_query: CallbackQuery, state, cart, model_classes):
    try:
        # –ü–∞—Ä—Å–∏–Ω–≥ callback_data
        data_parts = callback_query.data.split("_")

        action = data_parts[0]  # increase, decrease, add_to_cart, back_to_menu, remove
        item_type = data_parts[1]  # pizza, drink, sauce
        item_id = int(data_parts[2])  # ID —Ç–æ–≤–∞—Ä—É

        # –í–∏—Ç—è–≥—É—î–º–æ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –∫–ª–∞—Å –º–æ–¥–µ–ª—ñ —Ç–∞ –æ–±'—î–∫—Ç
        model_class = model_classes.get(item_type)
        if not model_class:
            await callback_query.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è —Ç–æ–≤–∞—Ä—É.", show_alert=True)
            return

        item = await sync_to_async(model_class.objects.get)(id=item_id)

        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É –∑—ñ —Å—Ç–∞–Ω—É
        state_data = await state.get_data()
        current_quantity = state_data.get(
            f"{item_type}_{item_id}_quantity", 1
        )  # –ó–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: 1

        # –õ–æ–≥—ñ–∫–∞ –¥—ñ–π
        if action == "increase":
            current_quantity += 1
            await update_cart_total(cart.id)  # –û–Ω–æ–≤–ª—é—î–º–æ —Å—É–º—É –∫–æ—à–∏–∫–∞
            cart_total = await sync_to_async(
                lambda: cart.total_sum
            )()  # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤—É —Å—É–º—É
        elif action == "decrease" and current_quantity > 1:
            current_quantity -= 1
            await update_cart_total(cart.id)  # –û–Ω–æ–≤–ª—é—î–º–æ —Å—É–º—É –∫–æ—à–∏–∫–∞
            cart_total = await sync_to_async(
                lambda: cart.total_sum
            )()  # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤—É —Å—É–º—É
        elif action == "add_to_cart":
            await sync_to_async(cart.add_item)(
                category=item_type,
                item_id=item_id,
                title=item.title,
                price=item.price,
                quantity=current_quantity,
            )
            await update_cart_total(cart.id)  # –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É –∫–æ—à–∏–∫–∞
            cart_total = await sync_to_async(
                lambda: cart.total_sum
            )()  # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤—É —Å—É–º—É

            await callback_query.message.answer(f"‚úÖ {item.title} –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞!")
            return
        elif action == "remove":
            current_quantity = 1
            await update_cart_total(cart.id)  # –û–Ω–æ–≤–ª—é—î–º–æ —Å—É–º—É –∫–æ—à–∏–∫–∞
            cart_total = await sync_to_async(
                lambda: cart.total_sum
            )()  # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤—É —Å—É–º—É
        elif action == "back_to_menu":
            await callback_query.message.edit_text("‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é...")
            return await send_item_details(callback_query, model_class, item_type)

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
        await state.update_data({f"{item_type}_{item_id}_quantity": current_quantity})

        # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        text = (
            f"**{item.title}**\n\n"
            f"{item.description}\n\n"
            f"üíµ –¶—ñ–Ω–∞: {item.price} –≥—Ä–Ω\n"
        )

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—à–∏–∫
        cart_total = await sync_to_async(lambda: cart.total_sum)()

        # –§–æ—Ä–º—É—î–º–æ –∫–Ω–æ–ø–∫–∏
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚ùå", callback_data=f"remove_{item_type}_{item_id}"
                    ),
                    InlineKeyboardButton(
                        text="‚ûñ", callback_data=f"decrease_{item_type}_{item_id}"
                    ),
                    InlineKeyboardButton(
                        text="‚ûï", callback_data=f"increase_{item_type}_{item_id}"
                    ),
                ],
                [
                    InlineKeyboardButton(
                        text=f"‚úÖ –î–æ–¥–∞—Ç–∏ {current_quantity} —à—Ç. - {item.price * current_quantity} –≥—Ä–Ω",
                        callback_data=f"add_to_cart_{item_type}_{item_id}_{current_quantity}",
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="<< –ù–∞–∑–∞–¥", callback_data=f"back_to_menu_{item_type}"
                    ),
                    InlineKeyboardButton(
                        text=f"<< –ö–æ—à–∏–∫ ({cart_total} –≥—Ä–Ω)", callback_data="view_cart"
                    ),
                ],
            ]
        )

        # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

        if callback_query.message.photo:
            await callback_query.message.edit_caption(
                caption=text, parse_mode="Markdown", reply_markup=keyboard
            )
        else:
            await callback_query.message.edit_text(
                text, parse_mode="Markdown", reply_markup=keyboard
            )

    except Exception as e:
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —É handle_callback: {e}")
        await callback_query.answer(
            "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.", show_alert=True
        )


@dp.callback_query(lambda callback: callback.data.startswith("back_to_menu_"))
async def back_to_menu(callback_query: CallbackQuery):
    try:
        data_parts = callback_query.data.split("_")

        item_type = data_parts[3]

        logger.debug(f"–û—Ç—Ä–∏–º–∞–Ω–æ callback_data: {callback_query.data}")
        logger.debug(f"item_type: {item_type}")

        # –í–∏–±–∏—Ä–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é
        if item_type == "pizza":
            await send_pizza(callback_query)
        elif item_type == "drink":
            await send_drinks(callback_query)
        elif item_type == "sauce":
            await send_sauces(callback_query)
        else:
            await callback_query.answer(
                f"–ù–µ–≤—ñ–¥–æ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑. {item_type}", show_alert=True
            )
            return

        cart = await Cart.objects.aget(
            user__telegram_id=callback_query.from_user.id, is_active=True
        )
        cart_total = cart.total_sum

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=f"<< –ö–æ—à–∏–∫ ({cart_total} –≥—Ä–Ω)", callback_data="view_cart"
                    ),
                ],
            ]
        )

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —É handle_back_to_menu: {e}")
        await callback_query.answer(
            "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.", show_alert=True
        )


async def get_item_price(item_type: str, item_id: int) -> int:
    """–û—Ç—Ä–∏–º—É—î —Ü—ñ–Ω—É —Ç–æ–≤–∞—Ä—É –∑ –ë–î, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ sync_to_async"""
    model_map = {"pizza": PizzaList, "drink": DrinkList, "sauce": SauceList}

    model = model_map.get(item_type)
    if not model:
        return 0

    try:
        item = await sync_to_async(model.objects.get)(
            id=item_id
        )  # –í–∏–∫–æ–Ω—É—î–º–æ ORM-–∑–∞–ø–∏—Ç —É –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        return item.price
    except model.DoesNotExist:
        return 0


@dp.callback_query(F.data.startswith("remove_"))
async def reset_quantity(callback: CallbackQuery, state):
    try:
        _, item_type, item_id = callback.data.split("_")
        item_id = int(item_id)

        # –°–∫–∏–¥–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ 1 —É state
        await state.update_data({f"{item_type}_{item_id}_quantity": 1})

        # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç—É–∞–ª—å–Ω—É —Ü—ñ–Ω—É –∑ –ë–î
        item_price = await get_item_price(item_type, item_id)

        if not callback.message.reply_markup:
            await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–º–∞—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏!")
            return

        # –û–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        keyboard = callback.message.reply_markup.inline_keyboard
        for row in keyboard:
            for button in row:
                if button.callback_data.startswith(
                    f"add_to_cart_{item_type}_{item_id}"
                ):
                    button.text = f"‚úÖ –î–æ–¥–∞—Ç–∏ 1 —à—Ç. - {item_price} –≥—Ä–Ω"
                    break

        updated_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

        # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await callback.message.edit_reply_markup(reply_markup=updated_markup)
        await callback.answer("‚úÖ –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–∫–∏–Ω—É—Ç–∞ –¥–æ 1!")

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —É reset_quantity: {e}")
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∏–¥–∞–Ω–Ω—ñ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ!", show_alert=True)


async def get_cart_items(telegram_id):
    cart = await Cart.objects.filter(user__telegram_id=telegram_id).alast()
    items = await sync_to_async(list)(CartItem.objects.filter(cart=cart).all())
    return {
        str(item.id): {
            "name": item.title,
            "quantity": item.quantity,
            "price": item.price,
            "category": item.category,
            "item_id": item.item_id,
        }
        for item in items
    }


def generate_cart_keyboard(cart_items, cart_total):
    keyboard_buttons = []

    for item_id, item in cart_items.items():
        keyboard_buttons.append(
            [
                InlineKeyboardButton(
                    text=f"{item['name']} - {item['quantity']} —à—Ç. {item['price']} –≥—Ä–Ω",
                    callback_data=f"item_{item_id}",
                )
            ]
        )

        # ‚úÖ –û—Ç—Ä–∏–º—É—î–º–æ category —Ç–∞ item_id –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        category = item.get("category", "unknown")
        item_id = item.get("item_id", item_id)  # –¢–µ–ø–µ—Ä –±–µ—Ä–µ–º–æ item_id –∑ CartItem

        # ‚úÖ –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π callback_data
        callback_data_edit = f"edit_{category}_{item_id}"
        callback_data_delete = f"delete_{category}_{item_id}"
        print(callback_data_edit, callback_data_delete)

        logger.debug(
            f"‚úÖ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ callback_data –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è: {callback_data_edit}"
        )
        logger.debug(
            f"üîç –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è callback_data: category={category}, item_id={item_id}"
        )

        keyboard_buttons.append(
            [
                InlineKeyboardButton(
                    text="–ó–º—ñ–Ω–∏—Ç–∏ ‚úè", callback_data=callback_data_edit
                ),
                InlineKeyboardButton(
                    text="–í–∏–¥–∞–ª–∏—Ç–∏ ‚õî", callback_data=callback_data_delete
                ),
            ]
        )

    if keyboard_buttons:
        keyboard_buttons.append(
            [InlineKeyboardButton(text="üóë –û—Ñ–æ—Ä–º–∏—Ç–∏", callback_data="checkout")]
        )
        keyboard_buttons.append(
            [InlineKeyboardButton(text="üö´ –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]
        )
        return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)


async def show_cart(message, user_id):
    cart_items = await get_cart_items(user_id)
    cart_total = (
        sum(item["price"] * item["quantity"] for item in cart_items.values())
        if cart_items
        else 0
    )
    print(cart_total, cart_items)
    keyboard = generate_cart_keyboard(cart_items, cart_total)
    text = (
        f"üõí –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n_–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {cart_total} –≥—Ä–Ω_"
        if cart_items
        else "üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π."
    )
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")


@dp.callback_query(lambda c: c.data == "view_cart")
async def show_cart_callback(callback_query: CallbackQuery):
    await show_cart(callback_query.message, callback_query.from_user.id)

    await callback_query.answer()


@dp.message(F.text == "–ö–æ—Ä–∑–∏–Ω–∞üõí")
async def show_cart_message(message: Message):
    await show_cart(message, message.from_user.id)


@dp.callback_query(lambda c: c.data.startswith("edit_"))
async def edit_item(callback_query: CallbackQuery):
    parts = callback_query.data.split("_")

    # –Ø–∫—â–æ parts –º—ñ—Å—Ç–∏—Ç—å –ª–∏—à–µ 3 –µ–ª–µ–º–µ–Ω—Ç–∏ (edit, category, item_id), –¥–æ–¥–∞—î–º–æ "view"
    if len(parts) == 3:
        parts.insert(1, "view")  # –î–æ–¥–∞—î–º–æ "view" —è–∫ –¥—ñ—é –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º

    if len(parts) < 4:
        logger.error(f"‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π callback_data: {callback_query.data}")
        await callback_query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ.", show_alert=True)
        return

    _, action, category, item_id_str = parts
    item_id = int(item_id_str)

    cart = await Cart.objects.filter(
        user__telegram_id=callback_query.from_user.id
    ).alast()

    cart_item = await sync_to_async(
        lambda: CartItem.objects.filter(
            category=category, item_id=item_id, cart=cart
        ).last()
    )()
    if not cart_item:
        await callback_query.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –∫–æ—à–∏–∫—É.", show_alert=True)
        return

    if action == "increase":
        cart_item.quantity += 1
    elif action == "decrease" and cart_item.quantity > 1:
        cart_item.quantity -= 1
    elif action == "confirm":
        await show_cart_callback(callback_query)
        return

    await cart_item.asave()
    cart_total = await sync_to_async(
        lambda: sum(
            item.price * item.quantity
            for item in CartItem.objects.filter(cart=cart).all()
        )
    )()
    await update_cart_total(cart_total)

    new_text = f"**{cart_item.title}**\n\nüíµ –¶—ñ–Ω–∞: {cart_item.price} –≥—Ä–Ω\nüì¶ –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {cart_item.quantity} —à—Ç."

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚ûñ", callback_data=f"edit_decrease_{category}_{item_id}"
                ),
                InlineKeyboardButton(
                    text="‚ûï", callback_data=f"edit_increase_{category}_{item_id}"
                ),
            ],
            [
                InlineKeyboardButton(
                    text=f"‚úÖ –ó–±–µ—Ä–µ–≥—Ç–∏",
                    callback_data=f"edit_confirm_{category}_{item_id}",
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"<< –ö–æ—à–∏–∫ ({cart_total} –≥—Ä–Ω)", callback_data="view_cart"
                )
            ],
        ]
    )

    current_text = callback_query.message.text
    current_markup = callback_query.message.reply_markup

    if current_text != new_text or current_markup != keyboard:
        await callback_query.message.edit_text(
            new_text, reply_markup=keyboard, parse_mode="Markdown"
        )
    else:
        await callback_query.answer("‚Ñπ –ù–µ–º–∞—î –∑–º—ñ–Ω —É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ.", show_alert=False)

    await callback_query.answer()


@dp.callback_query(lambda c: c.data.startswith(("edit_increase_", "edit_decrease_")))
async def change_quantity(callback_query: CallbackQuery):
    parts = callback_query.data.split("_")  # –†–æ–∑–±–∏–≤–∞—î–º–æ `callback_data`

    if len(parts) != 4:  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å —Ä–æ–∑–º—ñ—Ä—É
        logger.error(f"‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π callback_data: {callback_query.data}")
        await callback_query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ.", show_alert=True)
        return

    edit_prefix, action, category, item_id_str = parts  # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ä–æ–∑–ø–æ–¥—ñ–ª –∑–º—ñ–Ω–Ω–∏—Ö
    item_id = int(item_id_str)
    cart = await Cart.objects.filter(
        user__telegram_id=callback_query.from_user.id
    ).alast()
    cart_item = await sync_to_async(
        lambda: CartItem.objects.filter(
            category=category, item_id=item_id, cart=cart
        ).alast()
    )()
    if not cart_item:
        await callback_query.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –∫–æ—à–∏–∫—É.", show_alert=True)
        return

    if action == "increase":
        cart_item.quantity += 1
    elif action == "decrease" and cart_item.quantity > 1:
        cart_item.quantity -= 1

    await sync_to_async(cart_item.save)()
    await update_cart_total(cart_item.carts.first().id)

    await edit_item(callback_query)


@dp.callback_query(lambda c: c.data.startswith("delete_"))
async def delete_item(callback_query: CallbackQuery):
    parts = callback_query.data.split("_")

    if len(parts) != 3:  # –û—á—ñ–∫—É—î–º–æ —Ñ–æ—Ä–º–∞—Ç delete_category_itemID
        logger.error(f"‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π callback_data: {callback_query.data}")
        await callback_query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ.", show_alert=True)
        return

    _, category, item_id_str = parts
    item_id = int(item_id_str)
    cart = await Cart.objects.filter(
        user__telegram_id=callback_query.from_user.id
    ).alast()
    # –í–∏–¥–∞–ª—è—î–º–æ —Ç–æ–≤–∞—Ä —ñ–∑ –∫–æ—à–∏–∫–∞
    await sync_to_async(
        lambda: CartItem.objects.filter(
            category=category, item_id=item_id, cart=cart
        ).delete()
    )()

    # –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É –∫–æ—à–∏–∫–∞
    cart_total = await sync_to_async(
        lambda: sum(
            item.price * item.quantity
            for item in CartItem.objects.filter(cart=cart).all()
        )
    )()
    await update_cart_total(cart_total)

    # –ü–æ–∫–∞–∑—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É –∫–æ—Ä–∑–∏–Ω—É
    await show_cart_callback(callback_query)


@dp.message(F.text == "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—èüìú")
async def show_orders(message: Message):
    user = await BotUser.objects.aget(telegram_id=message.from_user.id)
    orders = await sync_to_async(list)(OrderHistory.objects.filter(user=user))
    if not orders:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å.")
        return

    text = "–í–∞—à—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n\n"
    for order in orders:
        text += (
            f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.id}:\n"
            f"–°—É–º–∞: {order.total_sum} –≥—Ä–Ω\n"
            f"–°—Ç–∞—Ç—É—Å: {order.get_status_display()}\n"
            f"–î–∞—Ç–∞: {order.created_at}\n\n"
        )

    await message.answer(text)


async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π...")
    await dp.start_polling(bot, handle_signals=False)


if __name__ == "__main__":
    asyncio.run(main())
